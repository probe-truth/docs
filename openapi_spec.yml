openapi: "3.0.1"
info:
  title: "dev_deeptect"
  version: "2025-09-01 20:56:28UTC"
  description: >
    # Introduction
    
    Deeptect is a product that uses patented technology for the detection of Audio, Audiovisual, and Visual deepfakes.
    
    ## Usage
    
    Deeptect is available as a web app plus API. The web app can be used like a normal website. 
    The API is for programmatic usage, e.g for integrating into existing enterprise applications. 
    
    ### Authentication
    
    *webportal* Standard username/password based auth.
    
    *API* The /login endpoint is used to fetch a JWT token that is used in subsequent API calls. 
    The username/password are passed in the body of the request using base64 encoding with the format "username:password"
    
    
    ### Uploading a file
    
    The API supports large file uploads by using presigned URLs. The process starts with a request to the 
    /v1/uploads endpoint with the request body containing the "filename". The server returns a presigned URL 
    that is then used in subsequent operations. Example code using python is provided below. 
    <details>
      <summary>Python Example Code</summary>
    ```python
        import json
        import requests  # install requests package
    
        api_endpoint = "placeholder"
        jwt_token = "placeholder"  # add the jwt_token, either through environment variables or other mechanisms
        auth_header = {"Authorization": f"Bearer {jwt_token}"}
        filename = "placeholder.wav"
        upload_request_body = json.dumps({"filename": filename})  # specify the filename of the upload
    
        presigned_url_response = requests.post(api_endpoint + "/v1/uploads", data=upload_request_body, headers=auth_header)
        if presigned_url_response.status_code == 200:
            # Sucessfully retrieved pre-signed URL
            response_json = presigned_url_response.json()
            unique_upload_id = response_json["upload_id"]
            presign_info = presigned_url_response.json()["presignResponse"]
            presigned_url = presign_info["url"]
            fields = presign_info["fields"]
            with open(filename, "rb") as f:
                files = {"file": (fields["key"], f)}
                upload_response = requests.post(presigned_url, data=fields, files=files)
                if upload_response.status_code == 204:
                    # successfully uploaded the file
                    print("Success. File has been uploaded")
                    print(f"Unique id (keep for your records): {unique_upload_id}")
        else:
            # the status_code can be 401, 500, etc, handle it gracefully in your application
            raise Exception("Request to retrieve upload url failed")
    ```
    
    </details>
servers:
- url: "https://7biv2ac9kd.execute-api.us-east-2.amazonaws.com/{basePath}"
  variables:
    basePath:
      default: "dev"
tags:
- name: "environment"
  x-amazon-apigateway-tag-value: "dev"
paths:
  /:
    get:
      responses:
        default:
          description: "Default response for GET /"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:370994511459:function:dev_homepage/invocations"
        connectionType: "INTERNET"
  /docs:
    get:
      responses:
        default:
          description: "Default response for GET /docs"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:370994511459:function:dev_api_docs/invocations"
        connectionType: "INTERNET"
  /health:
    get:
      responses:
        default:
          description: "Default response for GET /health"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:370994511459:function:dev_ping_healthcheck/invocations"
        connectionType: "INTERNET"
        timeoutInMillis: 5000
  /v1/inspection/{upload_id}:
    get:
      responses:
        default:
          description: "Default response for GET /v1/inspection/{upload_id}"
      security:
      - dev_cognito: []
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:370994511459:function:dev_inspection_result/invocations"
        connectionType: "INTERNET"
    parameters:
    - name: "upload_id"
      in: "path"
      description: "Generated path parameter for upload_id"
      required: true
      schema:
        type: "string"
  /v1/reports:
    get:
      responses:
        default:
          description: "Default response for GET /v1/reports"
      security:
      - dev_cognito: []
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:370994511459:function:dev_report_retriever/invocations"
        connectionType: "INTERNET"
  /verify_jwt:
    get:
      responses:
        default:
          description: "Default response for GET /verify_jwt"
      security:
      - dev_cognito: []
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:370994511459:function:dev_verify_jwt/invocations"
        connectionType: "INTERNET"
  /login:
    post:
      responses:
        default:
          description: "Default response for POST /login"
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:370994511459:function:dev_authorize_cognito/invocations"
        connectionType: "INTERNET"
        timeoutInMillis: 7000
  /v1/inspection:
    post:
      responses:
        default:
          description: "Default response for POST /v1/inspection"
      security:
      - dev_cognito: []
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:370994511459:function:dev_trigger_inference/invocations"
        connectionType: "INTERNET"
  /v1/user_uploads:
    post:
      responses:
        default:
          description: "Default response for POST /v1/user_uploads"
      security:
      - dev_cognito: []
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:370994511459:function:dev_user_uploads/invocations"
        connectionType: "INTERNET"
components:
  securitySchemes:
    dev_cognito:
      type: "oauth2"
      flows: {}
      x-amazon-apigateway-authorizer:
        identitySource: "$request.header.Authorization"
        jwtConfiguration:
          audience:
          - "6msdl66o4d0hu1lv4omv1mdbnl"
          issuer: "https://cognito-idp.us-east-2.amazonaws.com/us-east-2_iHW9hTEpb"
        type: "jwt"
x-amazon-apigateway-importexport-version: "1.0"
