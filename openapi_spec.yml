openapi: 3.0.3
info:
  title: Deeptect API Documentation
  version: 1.0.0
  description: >
    # Introduction
    
    Deeptect is a product that uses patented technology for the detection of Audio, Audiovisual, and Visual deepfakes.
    
    ## Usage
    
    Deeptect is available as a web app plus API. The web app can be used like a normal website. 
    The API is for programmatic usage, e.g for integrating into existing enterprise applications. 
    
    ### Authentication
    
    *webportal* Standard username/password based auth.
    
    *API* The /login endpoint is used to fetch a JWT token that is used in subsequent API calls. 
    The username/password are passed in the body of the request.
    
    
    ### Login Example
    <details>
      <summary> Login Python Example Code</summary>
      ```python
          import json
          import requests 
          
          endpoint = "https://7biv2ac9kd.execute-api.us-east-2.amazonaws.com/login"
          username = os.environ['username']  # or other mechanisms for getting the username
          password = os.environ['password']  # or other mechanisms for getting the password
          
          body = json.dumps({"username": username, "password": password})
          
          login_response = requests.post(endpoint, data=body)
          if login_response.status_code == 200:
            print("Successfully authenticated") 
            jwt_token = login_response.json()['access_token']
            refresh_token = login_response.json()['refresh_token']
          else:
            # gracefully handle failures in your application e.g with retries/etc 
            print(f"Login failed: status code {login_response.status_code} :: {login_response.text})
      ```    
    </details>
    
        
    ### Uploading a file
    
    The API supports large file uploads by using presigned URLs. The process starts with a request to the 
    /uploads endpoint with the request body containing the "filename". The server returns a presigned URL 
    that is then used in subsequent operations. Example code using python is provided below. 
    <details>
      <summary>File Upload Python Example Code</summary>
    ```python
        import json
        import requests  # install requests package
        
        api_endpoint = "placeholder"
        jwt_token = "placeholder"  # add the jwt_token, either through environment variables or other mechanisms
        auth_header = {"Authorization": f"Bearer {jwt_token}"}
        filename = "placeholder.wav"
        upload_request_body = json.dumps({"filename": filename})  # specify the filename of the upload
        
        presigned_url_response = requests.post(api_endpoint + "/uploads", data=upload_request_body, headers=auth_header)
        if presigned_url_response.status_code == 200:
            # Sucessfully retrieved pre-signed URL
            response_json = presigned_url_response.json()
            unique_upload_id = response_json["upload_id"]
            presign_info = presigned_url_response.json()["presignResponse"]
            presigned_url = presign_info["url"]
            fields = presign_info["fields"]
            with open(filename, "rb") as f:
                files = {"file": (fields["key"], f)}
                upload_response = requests.post(presigned_url, data=fields, files=files)
                if upload_response.status_code == 204:
                    # successfully uploaded the file
                    print("Success. File has been uploaded")
                    print(f"Unique id (keep for your records): {unique_upload_id}")
        else:
            # the status_code can be 401, 500, etc, handle it gracefully in your application
            raise Exception("Request to retrieve upload url failed")
    ```
    
    </details>
    
    

servers:
  - url: https://7biv2ac9kd.execute-api.us-east-2.amazonaws.com/
    description: Development endpoint for Deeptect
    variables:
      stage:
        default: dev
        description: API stage to use (e.g., dev, v1)
        enum:
          - dev
          - v1

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: The user's username
        password:
          type: string
          description: The user's password

    UploadFilePresignUrlRequest:
      type: object
      required:
        - filename
      properties:
        filename:
          type: string
          description: Filename for the upload

    LoginSuccessResponse:
      type: object
      properties:
        id_token:
          type: string
          description: JWT ID token for the user
        access_token:
          type: string
          description: JWT access token for API authorization
        refresh_token:
          type: string
          description: Token to refresh the access token
        expires_in:
          type: integer
          description: Time in seconds until the access token expires
        description:
          type: string
          description: Instructions for using the tokens

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message

    HealthResponse:
      type: object
      properties:
        message:
          type: string
          description: Health status of the API

    UserUploadResponse:
      type: object
      properties:
        presignResponse:
          type: object
          description: Presign response from s3 containing the temporary url for uploading the specified file
        upload_id:
          type: string
          description: The unique identifier which is used in subsequent API calls for the specified file
        method:
          type: string
          description: The HTTP method for the upload (e.g., POST)

    TriggerInspectionRequest:
      type: object
      required:
        - upload_id
        - case_id
      properties:
        upload_id:
          type: string
          description: Unique upload_id used for this inspection
        case_id:
          type: string
          description: case_id used for this inspection

    TriggerInspectionResponse:
      type: object
      properties:
        upload_id:
          type: string
          description: Unique upload_id used for this inspection
        case_id:
          type: string
          description: case_id used for this inspection
        job_id:
          type: string
          description: System-generated job_id for tracking this job's progress and for client app to check job status
        analysis_status:
          type: string
          description: The inspection job status
        message:
          type: string
          description: Generic descriptive human-readable message

    ReportRetrieveRequest:
      type: object
      required:
        - upload_id
        - case_id
      properties:
        upload_id:
          type: string
          description: The upload_id for which to fetch the report
        case_id:
          type: string
          description: The case_id for which to fetch the report

    ReportRetrieveResponse:
      type: string
      format: binary

    InferenceRetrieveResponse:
      type: object
      properties:
        job_id:
          type: string
          description: The job id that is tracked internally for a requested inspection
        case_id:
          type: string
          description: The case id that was specified by the user
        status:
          type: string
          description: The status of the inspection request
        predictions:
          type: string
          description: The predictions from each model that is used
        created_at:
          type: string
          description: Date time representing when the inspection was created


paths:
  /health:
    get:
      summary: Check API health
      description: Used for checking that the API service is in a healthy state
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /login:
    post:
      summary: Authenticate a user and return JWT tokens
      description: Authenticates a user with username and password, returning JWT tokens from Cognito User Pools
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessResponse'
        '401':
          description: Invalid username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: User not confirmed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user_uploads:
    post:
      summary: Generate a presigned URL for user file uploads
      description: Creates a presigned URL or metadata for user file uploads, returning an upload ID and method
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadFilePresignUrlRequest'
      responses:
        '200':
          description: Successfully retrieved the presigned s3 url for upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUploadResponse'

        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reports/{upload_id}/{case_id}:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a report
      parameters:
        - name: upload_id
          in: path
          required: true
          schema:
            type: string
            description: The ID of the upload for which the report is created
        - name: case_id
          in: path
          required: true
          schema:
            type: string
            description: The ID of the case for which the report is created
      responses:
        '200':
          description: Successfully retrieved the inspection report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportRetrieveResponse'
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/ReportRetrieveResponse'

        '403':
          description: Permission denied or missing parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /verify_jwt:
    get:
      responses:
        default:
          description: "Default response for GET /verify_jwt"
      security:
      - bearerAuth: [ ]

  /inspection:
    post:
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerInspectionRequest'
      responses:
        '201':
          description: Successfully created inspection job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerInspectionResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /inspection/{upload_id}:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get inspection details for an upload
      parameters:
        - name: upload_id
          in: path
          required: true
          schema:
            type: string
            description: The ID of the upload to inspect
      responses:
        '200':
          description: Successfully retrieved the inspection results for the upload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InferenceRetrieveResponse'
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
